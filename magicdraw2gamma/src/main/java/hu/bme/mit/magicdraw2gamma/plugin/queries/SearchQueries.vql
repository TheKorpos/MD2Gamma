package hu.bme.mit.magicdraw2gamma.plugin.queries

import "http://www.nomagic.com/magicdraw/UML/2.5.0";


pattern StatechartDefinitions(statechartDefinition: Class, stateMachine: StateMachine){
	Class.appliedStereotypeInstance.classifier.name(statechartDefinition, "Block");
	Class.ownedBehavior(statechartDefinition, stateMachine);
	Class.name(statechartDefinition, className);
	StateMachine.name(stateMachine, className);
}

pattern MainRegions(statechartDefinition: Class, region: Region){
	find StatechartDefinitions(statechartDefinition, stateMachine);
	StateMachine.region(stateMachine, region);
} 

pattern StatesInRegions(region: Region, vertex: Vertex){
	Region.subvertex(region, vertex);
}


pattern RegionsInStates(state: State, region: Region){
	State.region(state, region);
}

pattern Transitions(source: Vertex, transition: Transition, target: Vertex){
	Transition.source(transition, source);
	Transition.target(transition, target);
}


private pattern InnerRegion(region: Region, innerRegion: Region){
	find StatesInRegions(region, state);
	find RegionsInStates(state, innerRegion);
}

pattern RegionsInStatechart(stmt: Class, region: Region){
	find MainRegions(stmt, region);
} or {
	find MainRegions(stmt, outerRegion);
	find InnerRegion+(outerRegion, region);
}

pattern OwnedTransitions(stmt: Class, transition: Transition){
	find RegionsInStatechart(stmt, region);
	Region.transition(region, transition);
}

pattern Triggers(transition: Transition, trigger: Trigger){
	Transition.trigger(transition, trigger);
}

pattern Signals(trigger: Trigger, signal: Signal){
	Trigger.event(trigger, signalEvent);
	SignalEvent.signal(signalEvent, signal);
}

/*pattern PortsOnBlock(block: Class, port: Port){
	Class.ownedAttribute(block, port);
}*/

